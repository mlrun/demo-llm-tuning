kind: project
metadata:
  name: mlopspedia-bot-yonis
spec:
  params:
    source: git://github.com/mlrun/demo-llm-tuning.git#main
    default_image: yonishelach/mlrun-llm
  functions:
  - url: src/data_collection.py
    name: data-collecting
    kind: job
    image: mlrun/mlrun
  - url: src/data_preprocess.py
    name: data-preparing
    kind: job
  - url: src/trainer.py
    name: training
    kind: job
  - name: serving
    spec:
      kind: serving
      metadata:
        name: serving
        project: mlopspedia-bot-yonis
      spec:
        command: ''
        args: []
        image: yonishelach/mlrun-llm
        build:
          functionSourceCode: 
          source: ./
          commands: []
          code_origin: http://github.com/mlrun/demo-llm-tuning#refs/heads/main#91145f96f3cd627431de34d0bae3547efbdd7097
          origin_filename: src/serving.py
          requirements: []
        description: ''
        default_handler: ''
        disable_auto_mount: false
        clone_target_dir: ''
        env:
        - name: V3IO_API
          value: ''
        - name: V3IO_USERNAME
          value: ''
        - name: V3IO_ACCESS_KEY
          value: ''
        - name: V3IO_FRAMESD
          value: ''
        resources:
          requests:
            memory: 1Mi
            cpu: 25m
          limits:
            nvidia.com/gpu: 1
        priority_class_name: igz-workload-medium
        preemption_mode: prevent
        min_replicas: 1
        max_replicas: 4
        source: ''
        function_kind: serving_v2
        readiness_timeout: 3000
        function_handler: serving:handler
        base_image_pull: false
        graph:
          steps:
            preprocess:
              kind: task
              handler: preprocess
              after: []
            mlopspedia:
              kind: task
              class_name: LLMModelServer
              class_args:
                model_args:
                  load_in_8bit: true
                  device_map: cuda:0
                  trust_remote_code: true
                tokenizer_name: tiiuae/falcon-7b
                model_name: tiiuae/falcon-7b
                peft_model: store://artifacts/mlopspedia-bot-yonis/falcon-7b-mlrun
              after:
              - preprocess
            postprocess:
              kind: task
              handler: postprocess
              after:
              - mlopspedia
            toxicity-classifier:
              kind: task
              class_name: ToxicityClassifierModelServer
              class_args:
                threshold: 0.7
              after:
              - postprocess
              responder: true
          engine: async
        secret_sources: []
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: app.iguazio.com/lifecycle
                  operator: NotIn
                  values:
                  - preemptible
                - key: eks.amazonaws.com/capacityType
                  operator: NotIn
                  values:
                  - SPOT
                - key: node-lifecycle
                  operator: NotIn
                  values:
                  - spot
        tolerations: null
        security_context: {}
      verbose: false
  workflows:
  - path: src/training_workflow.py
    name: training_workflow
  artifacts: []
  conda: ''
  source: git://github.com/mlrun/demo-llm-tuning.git#main
  origin_url: http://github.com/mlrun/demo-llm-tuning#refs/heads/main
  load_source_on_run: true
  desired_state: online
  default_image: yonishelach/mlrun-llm
  build:
    commands: []
    requirements: []
  custom_packagers: []
